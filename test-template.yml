# Azure DevOps Test Template
# Reusable template for running Playwright tests

parameters:
  - name: project
    type: string
  - name: testType
    type: string
  - name: displayName
    type: string

steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '$(NODE_VERSION)'
    displayName: 'Install Node.js'

  - task: Cache@2
    inputs:
      key: 'npm | "$(Agent.OS)" | package-lock.json'
      restoreKeys: |
        npm | "$(Agent.OS)"
      path: ~/.npm
    displayName: 'Cache npm'

  - script: |
      npm ci
    displayName: 'Install npm dependencies'

  - task: Cache@2
    inputs:
      key: 'playwright | "$(Agent.OS)" | package-lock.json'
      restoreKeys: |
        playwright | "$(Agent.OS)"
      path: '$(PLAYWRIGHT_BROWSERS_PATH)'
    displayName: 'Cache Playwright browsers'

  - script: |
      npx playwright install --with-deps
    displayName: 'Install Playwright browsers'

  - task: AzureKeyVault@2
    inputs:
      azureSubscription: '$(AZURE_SUBSCRIPTION)'
      KeyVaultName: '$(KEY_VAULT_NAME)'
      SecretsFilter: '*'
      RunAsPreJob: false
    displayName: 'Get secrets from Azure Key Vault'
    condition: and(succeeded(), ne(variables['KEY_VAULT_NAME'], ''))

  - script: |
      # Set environment variables for tests
      export BASE_URL="$(BASE_URL)"
      export API_BASE_URL="$(API_BASE_URL)"
      export TEST_USERNAME="$(TEST_USERNAME)"
      export TEST_PASSWORD="$(TEST_PASSWORD)"
      export CI=true
      export HEADLESS=true

      # Create directories for test results
      mkdir -p test-results
      mkdir -p screenshots
      mkdir -p allure-results

      # Run tests based on project type
      if [ "${{ parameters.testType }}" = "api" ]; then
        echo "Running API tests..."
        npx playwright test --project="${{ parameters.project }}" --grep="@api" --reporter=html,allure-playwright,junit
      elif [ "${{ parameters.testType }}" = "mobile" ]; then
        echo "Running mobile tests..."
        npx playwright test --project="${{ parameters.project }}" --grep="@mobile" --reporter=html,allure-playwright,junit
      elif [ "${{ parameters.testType }}" = "tablet" ]; then
        echo "Running tablet tests..."
        npx playwright test --project="${{ parameters.project }}" --grep="@tablet" --reporter=html,allure-playwright,junit
      else
        echo "Running web tests..."
        npx playwright test --project="${{ parameters.project }}" --grep="@web" --reporter=html,allure-playwright,junit
      fi
    displayName: '${{ parameters.displayName }}'
    env:
      BASE_URL: $(BASE_URL)
      API_BASE_URL: $(API_BASE_URL)
      TEST_USERNAME: $(TEST_USERNAME)
      TEST_PASSWORD: $(TEST_PASSWORD)
      PLAYWRIGHT_BROWSERS_PATH: $(PLAYWRIGHT_BROWSERS_PATH)
    continueOnError: true

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/junit-results.xml'
      failTaskOnFailedTests: false
      testRunTitle: '${{ parameters.displayName }}'
    displayName: 'Publish ${{ parameters.displayName }} Results'
    condition: always()

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: 'test-results'
      artifact: 'test-results-${{ parameters.project }}-$(Build.BuildId)'
      publishLocation: 'pipeline'
    displayName: 'Publish Test Results Artifact'
    condition: always()

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: 'playwright-report'
      artifact: 'playwright-report-${{ parameters.project }}-$(Build.BuildId)'
      publishLocation: 'pipeline'
    displayName: 'Publish Playwright Report'
    condition: always()

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: 'allure-results'
      artifact: 'allure-results-${{ parameters.project }}-$(Build.BuildId)'
      publishLocation: 'pipeline'
    displayName: 'Publish Allure Results'
    condition: always()

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: 'screenshots'
      artifact: 'screenshots-${{ parameters.project }}-$(Build.BuildId)'
      publishLocation: 'pipeline'
    displayName: 'Publish Screenshots'
    condition: failed()

  - script: |
      # Generate test summary
      echo "## Test Summary for ${{ parameters.displayName }}" > test-summary.md
      echo "Project: ${{ parameters.project }}" >> test-summary.md
      echo "Test Type: ${{ parameters.testType }}" >> test-summary.md
      echo "Build: $(Build.BuildNumber)" >> test-summary.md
      echo "Date: $(date)" >> test-summary.md
      echo "" >> test-summary.md

      if [ -f "test-results.json" ]; then
        echo "Test results found, generating summary..." >> test-summary.md
        # Add test results parsing logic here
      else
        echo "No test results file found" >> test-summary.md
      fi
    displayName: 'Generate Test Summary'
    condition: always()

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: 'test-summary.md'
      artifact: 'test-summary-${{ parameters.project }}-$(Build.BuildId)'
      publishLocation: 'pipeline'
    displayName: 'Publish Test Summary'
    condition: always()
